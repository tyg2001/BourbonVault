@page "/collection/add"
@using Microsoft.AspNetCore.Components.Forms
@inject IVisionService VisionService
@using BourbonVault.Core.DTOs
@using BourbonVault.Web.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IBottleService BottleService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-3">
    <h1>Add New Bottle</h1>
    
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@bottleModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="name">Bottle Name</label>
                                    <InputText id="name" class="form-control" @bind-Value="bottleModel.Name" />
                                    <ValidationMessage For="@(() => bottleModel.Name)" />
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="distilleryName">Distillery</label>
                                    <InputText id="distilleryName" class="form-control" @bind-Value="bottleModel.DistilleryName" />
                                    <ValidationMessage For="@(() => bottleModel.DistilleryName)" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="type">Type</label>
                                    <InputSelect id="type" class="form-select" @bind-Value="bottleModel.Type">
                                        <option value="">Select Type...</option>
                                        <option value="Bourbon">Bourbon</option>
                                        <option value="Rye">Rye</option>
                                        <option value="American Whiskey">American Whiskey</option>
                                        <option value="Scotch">Scotch</option>
                                        <option value="Irish Whiskey">Irish Whiskey</option>
                                        <option value="Japanese Whisky">Japanese Whisky</option>
                                        <option value="Canadian Whisky">Canadian Whisky</option>
                                        <option value="Other">Other</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => bottleModel.Type)" />
                                </div>
                            </div>
                            
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="ageYears">Age (Years)</label>
                                    <InputNumber id="ageYears" class="form-control" @bind-Value="bottleModel.AgeYears" />
                                    <ValidationMessage For="@(() => bottleModel.AgeYears)" />
                                </div>
                            </div>
                            
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="proof">Proof</label>
                                    <InputNumber id="proof" class="form-control" @bind-Value="bottleModel.Proof" step="0.1" />
                                    <ValidationMessage For="@(() => bottleModel.Proof)" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="bottleSize">Bottle Size (ml)</label>
                                    <InputNumber id="bottleSize" class="form-control" @bind-Value="bottleModel.BottleSizeML" />
                                    <ValidationMessage For="@(() => bottleModel.BottleSizeML)" />
                                </div>
                            </div>
                            
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="purchaseDate">Purchase Date</label>
                                    <InputDate id="purchaseDate" class="form-control" @bind-Value="bottleModel.PurchaseDate" />
                                    <ValidationMessage For="@(() => bottleModel.PurchaseDate)" />
                                </div>
                            </div>
                            
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="purchasePrice">Purchase Price ($)</label>
                                    <InputNumber id="purchasePrice" class="form-control" @bind-Value="bottleModel.PurchasePrice" step="0.01" />
                                    <ValidationMessage For="@(() => bottleModel.PurchasePrice)" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="status">Bottle Status</label>
                                    <InputSelect id="status" class="form-select" @bind-Value="bottleModel.Status">
                                        <option value="Sealed">Sealed</option>
                                        <option value="Opened">Opened</option>
                                        <option value="Empty">Empty</option>
                                        <option value="Wishlist">Wishlist</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => bottleModel.Status)" />
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="tags">Tags (comma separated)</label>
                                    <InputText id="tags" class="form-control" @bind-Value="tagsInput" placeholder="e.g., limited release, barrel proof, store pick" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="imageUrl">Image URL</label>
                            <InputText id="imageUrl" class="form-control" @bind-Value="bottleModel.ImageUrl" placeholder="https://..." />
                            <small class="text-muted">Direct link to an image of this bottle (optional)</small>
                            <ValidationMessage For="@(() => bottleModel.ImageUrl)" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="notes">Notes</label>
                            <InputTextArea id="notes" class="form-control" @bind-Value="bottleModel.Notes" rows="3" />
                            <ValidationMessage For="@(() => bottleModel.Notes)" />
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                    <span>Saving...</span>
                                }
                                else
                                {
                                    <span>Add Bottle</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Bottle Preview</h5>
                </div>
                <div class="card-body">
                    <div class="text-center mb-3">
                        <img src="@GetPreviewImage()" alt="Bottle preview" style="max-height: 200px; max-width: 100%;" class="img-thumbnail" />
                        <div class="mt-3">
                            <InputFile OnChange="OnImageSelected" accept="image/*" capture="environment" />
                            <button type="button" class="btn btn-outline-primary btn-sm ms-2" @onclick="LookupFromPhoto" disabled="@(!CanLookupFromPhoto)">
                                <span class="oi oi-camera me-1"></span> Lookup from Photo
                            </button>
                        </div>
                    </div>
                    
                    <h5>@(string.IsNullOrEmpty(bottleModel.Name) ? "Bottle Name" : bottleModel.Name)</h5>
                    <p class="text-muted">@(string.IsNullOrEmpty(bottleModel.DistilleryName) ? "Distillery" : bottleModel.DistilleryName)</p>
                    
                    <div class="bottle-details small">
                        <div><strong>Type:</strong> @(string.IsNullOrEmpty(bottleModel.Type) ? "N/A" : bottleModel.Type)</div>
                        <div><strong>Age:</strong> @(bottleModel.AgeYears > 0 ? $"{bottleModel.AgeYears} Years" : "NAS")</div>
                        <div><strong>Proof:</strong> @(bottleModel.Proof > 0 ? bottleModel.Proof.ToString() : "N/A")</div>
                        <div><strong>Status:</strong> @bottleModel.Status</div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(tagsInput))
                    {
                        <div class="mt-3">
                            <strong>Tags:</strong>
                            <div>
                                @foreach (var tag in ParseTags(tagsInput))
                                {
                                    <span class="badge bg-secondary me-1 mb-1">@tag</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private BottleCreateDto bottleModel = new BottleCreateDto
    {
        Status = "Sealed", // Default value
        PurchaseDate = DateTime.Now
    };
    
    private string tagsInput = string.Empty;
    private bool isProcessing = false;
    
    private List<string> ParseTags(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return new List<string>();
            
        return input.Split(',')
            .Select(t => t.Trim())
            .Where(t => !string.IsNullOrWhiteSpace(t))
            .ToList();
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/collection");
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            isProcessing = true;
            
            // Set the tags from the input
            bottleModel.Tags = ParseTags(tagsInput);
            
            // Auto-assign a local bourbon placeholder if ImageUrl not provided
            if (string.IsNullOrWhiteSpace(bottleModel.ImageUrl))
            {
                bottleModel.ImageUrl = GetPlaceholderBySeed(bottleModel.Name ?? bottleModel.DistilleryName ?? "bourbon");
            }

            // Create the bottle
            var result = await BottleService.CreateBottleAsync(bottleModel);
            
            if (result != null)
            {
                NavigationManager.NavigateTo("/collection");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to create bottle. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private string GetPreviewImage()
    {
        if (!string.IsNullOrWhiteSpace(uploadedImageDataUrl))
            return uploadedImageDataUrl!;
        if (!string.IsNullOrWhiteSpace(bottleModel.ImageUrl))
            return bottleModel.ImageUrl;
        return GetPlaceholderBySeed(bottleModel.Name ?? bottleModel.DistilleryName ?? "bourbon");
    }

    private string GetPlaceholderBySeed(string seed)
    {
        var idx = Math.Abs((seed?.Length ?? 0) % 2) + 1; // 1..2
        return $"images/bourbon/placeholder-{idx}.svg";
    }

    // Camera capture and lookup
    private IBrowserFile? selectedPhoto;
    private string? uploadedImageDataUrl;
    private bool CanLookupFromPhoto => selectedPhoto != null && !isProcessing;

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        selectedPhoto = e.File;
        // Build a data URL for preview
        try
        {
            await using var stream = selectedPhoto.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            var mime = selectedPhoto.ContentType ?? "image/jpeg";
            uploadedImageDataUrl = $"data:{mime};base64,{base64}";
        }
        catch
        {
            uploadedImageDataUrl = null;
        }
        StateHasChanged();
    }

    private async Task LookupFromPhoto()
    {
        if (selectedPhoto is null) return;
        try
        {
            isProcessing = true;
            var result = await VisionService.LookupAsync(selectedPhoto);
            if (result.Success)
            {
                // Prefill fields from suggested data
                if (!string.IsNullOrWhiteSpace(result.Suggested?.Name))
                    bottleModel.Name = result.Suggested!.Name;
                if (!string.IsNullOrWhiteSpace(result.Suggested?.Type))
                    bottleModel.Type = result.Suggested!.Type;
                if (!string.IsNullOrWhiteSpace(result.Suggested?.Brand))
                    bottleModel.DistilleryName = result.Suggested!.Brand;
                if (!string.IsNullOrWhiteSpace(result.Suggested?.ImageUrl))
                    bottleModel.ImageUrl = result.Suggested!.ImageUrl;

                await JSRuntime.InvokeVoidAsync("alert", $"Detected {result.Format}: {result.Barcode}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "No barcode found in photo.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lookup failed: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}
